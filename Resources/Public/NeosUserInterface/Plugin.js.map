{
  "version": 3,
  "sources": ["../../Private/NeosUserInterface/node_modules/@neos-project/neos-ui-extensibility/src/readFromConsumerApi.ts", "../../Private/NeosUserInterface/node_modules/@neos-project/neos-ui-extensibility/src/index.ts", "../../Private/NeosUserInterface/src/ClipboardInputTransformationPlugin.js", "../../Private/NeosUserInterface/src/index.js"],
  "sourcesContent": ["export default function readFromConsumerApi(key: string): (...args: any[]) => any {\n    return (...args: any[]) => {\n        if ((window as any)['@Neos:HostPluginAPI'] && (window as any)['@Neos:HostPluginAPI'][`@${key}`]) {\n            return (window as any)['@Neos:HostPluginAPI'][`@${key}`](...args);\n        }\n\n        throw new Error('You are trying to read from a consumer api that hasn\\'t been initialized yet!');\n    };\n}\n", "import createConsumerApi from './createConsumerApi';\nimport readFromConsumerApi from './readFromConsumerApi';\nimport {\n    SynchronousRegistry,\n    SynchronousMetaRegistry\n} from './registry/index';\n\nexport default readFromConsumerApi('manifest');\n\nexport {\n    createConsumerApi,\n    readFromConsumerApi,\n    SynchronousRegistry,\n    SynchronousMetaRegistry\n};\n", "\nconst setTextOfElement = (textElement, newText) => {\n    // todo use `UpcastWriter.createText` and `UpcastWriter.replace` but we cant get ahold of the writer until: https://github.com/neos/neos-ui/issues/3436\n    textElement._textData = newText\n}\n\nconst traverseTextElements = (element, textElementVisitor) => {\n    if (element.is(\"text\")) {\n        textElementVisitor(element)\n        return\n    }\n\n    if (element.childCount) {\n        for (const child of element.getChildren()) {\n            traverseTextElements(child, textElementVisitor)\n        }\n    }\n}\n\nexport const createClipboardInputTransformationPlugin = (replacementsConfiguration) => function (editor) {\n    // https://ckeditor.com/docs/ckeditor5/16.0.0/framework/guides/deep-dive/clipboard.html#input-pipeline\n\n    const replacements = replacementsConfiguration.map(({ search, replace }) => [search, replace])\n\n    // fyi when ckeditor is updated, the api changes to `editor.plugins.get('ClipboardPipeline')`\n    editor.plugins.get('Clipboard').on(\n        'inputTransformation',\n        (evt, data) => {\n            traverseTextElements(data.content, (textElement) => {\n                /** @type string */\n                const textContents = textElement.data;\n\n                let newTextContents = textContents;\n\n                for (const [from, to] of replacements) {\n                    newTextContents = newTextContents.replaceAll(from, to)\n                }\n\n                if (textContents !== newTextContents) {\n                    setTextOfElement(textElement, newTextContents)\n                }\n            })\n        },\n        { priority: 'high' }\n    );\n}\n", "import manifest from \"@neos-project/neos-ui-extensibility\";\nimport { createClipboardInputTransformationPlugin } from \"./ClipboardInputTransformationPlugin\";\n\nconst addPlugin = (Plugin) => (ckEditorConfiguration, options) => {\n    return {\n        ...ckEditorConfiguration,\n        plugins: [\n            ...(ckEditorConfiguration.plugins ?? []),\n            Plugin\n        ]\n    };\n};\n\nmanifest('Visol.Neos.ClipboardInputTransformation', {}, (globalRegistry, { frontendConfiguration }) => {\n    const ckEditorRegistry = globalRegistry.get('ckEditor5');\n    const replacementsConfiguration = frontendConfiguration?.['Visol.Neos.ClipboardInputTransformation']?.replacements;\n\n    const config = ckEditorRegistry.get('config');\n\n    if (!replacementsConfiguration || !replacementsConfiguration.length) {\n        return;\n    }\n\n    const ClipboardInputTransformationPlugin = createClipboardInputTransformationPlugin(replacementsConfiguration);\n    config.set('Visol.Neos.ClipboardInputTransformation', addPlugin(ClipboardInputTransformationPlugin));\n});\n"],
  "mappings": "MAAc,SAAPA,EAAqCC,EAAW,CACnD,MAAO,IAAIC,IAAe,CACtB,GAAK,OAAe,qBAAqB,GAAM,OAAe,qBAAqB,EAAE,IAAID,GAAK,EAC1F,OAAQ,OAAe,qBAAqB,EAAE,IAAIA,GAAK,EAAE,GAAGC,CAAI,EAGpE,MAAM,IAAI,MAAM,8EAA+E,CACnG,CACJ,CCDA,IAAAC,EAAeC,EAAoB,UAAU,ECN7C,IAAMC,EAAmB,CAACC,EAAaC,IAAY,CAE/CD,EAAY,UAAYC,CAC5B,EAEMC,EAAuB,CAACC,EAASC,IAAuB,CAC1D,GAAID,EAAQ,GAAG,MAAM,EAAG,CACpBC,EAAmBD,CAAO,EAC1B,OAGJ,GAAIA,EAAQ,WACR,QAAWE,KAASF,EAAQ,YAAY,EACpCD,EAAqBG,EAAOD,CAAkB,CAG1D,EAEaE,EAA4CC,GAA8B,SAAUC,EAAQ,CAGrG,IAAMC,EAAeF,EAA0B,IAAI,CAAC,CAAE,OAAAG,EAAQ,QAAAC,CAAQ,IAAM,CAACD,EAAQC,CAAO,CAAC,EAG7FH,EAAO,QAAQ,IAAI,WAAW,EAAE,GAC5B,sBACA,CAACI,EAAKC,IAAS,CACXX,EAAqBW,EAAK,QAAUb,GAAgB,CAEhD,IAAMc,EAAed,EAAY,KAE7Be,EAAkBD,EAEtB,OAAW,CAACE,EAAMC,CAAE,IAAKR,EACrBM,EAAkBA,EAAgB,WAAWC,EAAMC,CAAE,EAGrDH,IAAiBC,GACjBhB,EAAiBC,EAAae,CAAe,CAErD,CAAC,CACL,EACA,CAAE,SAAU,MAAO,CACvB,CACJ,EC1CA,IAAMG,EAAaC,GAAW,CAACC,EAAuBC,KAC3C,CACH,GAAGD,EACH,QAAS,CACL,GAAIA,EAAsB,SAAW,CAAC,EACtCD,CACJ,CACJ,GAGJG,EAAS,0CAA2C,CAAC,EAAG,CAACC,EAAgB,CAAE,sBAAAC,CAAsB,IAAM,CACnG,IAAMC,EAAmBF,EAAe,IAAI,WAAW,EACjDG,EAA4BF,IAAwB,yCAAyC,GAAG,aAEhGG,EAASF,EAAiB,IAAI,QAAQ,EAE5C,GAAI,CAACC,GAA6B,CAACA,EAA0B,OACzD,OAGJ,IAAME,EAAqCC,EAAyCH,CAAyB,EAC7GC,EAAO,IAAI,0CAA2CT,EAAUU,CAAkC,CAAC,CACvG,CAAC",
  "names": ["readFromConsumerApi", "key", "args", "dist_default", "readFromConsumerApi", "setTextOfElement", "textElement", "newText", "traverseTextElements", "element", "textElementVisitor", "child", "createClipboardInputTransformationPlugin", "replacementsConfiguration", "editor", "replacements", "search", "replace", "evt", "data", "textContents", "newTextContents", "from", "to", "addPlugin", "Plugin", "ckEditorConfiguration", "options", "dist_default", "globalRegistry", "frontendConfiguration", "ckEditorRegistry", "replacementsConfiguration", "config", "ClipboardInputTransformationPlugin", "createClipboardInputTransformationPlugin"]
}
